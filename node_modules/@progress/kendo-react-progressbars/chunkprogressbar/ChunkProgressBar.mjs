/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as s from "react";
import e from "prop-types";
import { validatePackage as H, useRtl as K, classNames as v, getTabIndex as V } from "@progress/kendo-react-common";
import { calculateRatio as q } from "../common/utils.mjs";
import { packageMetadata as D } from "../package-metadata.mjs";
const u = s.forwardRef((t, y) => {
  H(D);
  const {
    chunkCount: h = a.chunkCount,
    className: C,
    disabled: c,
    orientation: x,
    min: m = a.min,
    max: d = a.max,
    reverse: N = a.reverse,
    style: P,
    tabIndex: S,
    emptyStyle: R,
    emptyClassName: E,
    progressStyle: I,
    progressClassName: w
  } = t, l = s.useRef(null), T = s.useCallback(
    () => {
      l.current && l.current.focus();
    },
    []
  );
  s.useImperativeHandle(y, () => ({
    element: l.current,
    focus: T
  }));
  const p = t.value || a.value, k = t.value === null, j = K(l, t.dir), o = x === "vertical", z = {
    className: v(
      "k-progressbar k-chunk-progressbar",
      {
        "k-progressbar-horizontal": !o,
        "k-progressbar-vertical": o,
        "k-progressbar-reverse": N,
        "k-progressbar-indeterminate": k,
        "k-disabled": c
      },
      C
    ),
    ref: l,
    dir: j,
    tabIndex: V(S, c),
    role: "progressbar",
    "aria-label": t.ariaLabel,
    "aria-valuemin": m,
    "aria-valuemax": d,
    "aria-valuenow": k ? void 0 : p,
    "aria-disabled": c,
    style: P
  }, B = ({ count: n }) => {
    let b = [];
    const g = 100 / n + "%", L = q(m, d, p), M = Math.floor(L * n), f = Array(n).fill(!1);
    for (let r = 0; r < M; r++)
      f[r] = !0;
    for (let r = 0; r < n; ++r) {
      const i = f[r], A = i ? w : E, F = { ...{
        width: o ? void 0 : g,
        height: o ? g : void 0
      }, ...i ? I : R };
      b.push(
        /* @__PURE__ */ s.createElement(
          "li",
          {
            key: r,
            className: v(
              "k-progressbar-chunk",
              {
                "k-first": r === 0,
                "k-last": r === n - 1,
                "k-selected": i
              },
              A
            ),
            style: F
          }
        )
      );
    }
    return /* @__PURE__ */ s.createElement(s.Fragment, null, b);
  };
  return /* @__PURE__ */ s.createElement("div", { ...z }, /* @__PURE__ */ s.createElement("ul", { className: "k-progressbar-chunks k-reset" }, /* @__PURE__ */ s.createElement(B, { count: h || a.chunkCount })));
});
u.propTypes = {
  chunkCount: e.number,
  ariaLabel: e.string,
  disabled: e.bool,
  reverse: e.bool,
  max: e.number,
  min: e.number,
  value: e.number,
  tabIndex: e.number,
  emptyStyle: e.object,
  emptyClassName: e.string,
  progressStyle: e.object,
  progressClassName: e.string
};
const a = {
  chunkCount: 5,
  min: 0,
  max: 100,
  value: 0,
  disabled: !1,
  reverse: !1
};
u.defaultProps = a;
u.displayName = "KendoChunkProgressBar";
export {
  u as ChunkProgressBar
};
