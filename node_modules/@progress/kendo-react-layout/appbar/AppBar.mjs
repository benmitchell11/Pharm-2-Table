/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import t from "prop-types";
import { validatePackage as h, focusFirstFocusableChild as C, useId as y, classNames as g } from "@progress/kendo-react-common";
import { packageMetadata as N } from "../package-metadata.mjs";
const l = e.forwardRef((o, m) => {
  h(N);
  const {
    children: d,
    className: r,
    style: u,
    id: f
  } = o, a = e.useRef(null), p = e.useCallback(
    () => {
      a.current && C(a.current);
    },
    []
  ), b = e.useCallback(
    () => ({
      element: a.current,
      focus: p
    }),
    [p]
  );
  e.useImperativeHandle(m, b);
  const k = y(), i = e.useMemo(
    () => o.themeColor || c.themeColor,
    [o.themeColor]
  ), n = e.useMemo(
    () => o.position || c.position,
    [o.position]
  ), s = e.useMemo(
    () => o.positionMode || c.positionMode,
    [o.positionMode]
  ), M = e.useMemo(
    () => g(
      "k-appbar",
      {
        "k-appbar-top": n === "top",
        "k-appbar-bottom": n === "bottom",
        "k-appbar-static": s === "static",
        "k-appbar-sticky": s === "sticky",
        "k-appbar-fixed": s === "fixed",
        [`k-appbar-${i}`]: !!i
      },
      r
    ),
    [n, s, i, r]
  );
  return /* @__PURE__ */ e.createElement(
    "div",
    {
      className: M,
      style: u,
      id: f || k
    },
    d
  );
});
l.propTypes = {
  children: t.any,
  className: t.string,
  style: t.object,
  id: t.string,
  themeColor: t.string,
  position: t.oneOf(["top", "bottom"]),
  positionMode: t.oneOf(["static", "sticky", "fixed"])
};
const c = {
  themeColor: "light",
  position: "top",
  positionMode: "static"
};
l.displayName = "KendoAppBar";
export {
  l as AppBar
};
