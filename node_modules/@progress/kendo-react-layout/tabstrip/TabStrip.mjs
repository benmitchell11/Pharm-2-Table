/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as r from "react";
import a from "prop-types";
import { TabStripNavigation as c } from "./TabStripNavigation.mjs";
import { TabStripContent as b } from "./TabStripContent.mjs";
import { Keys as n, validatePackage as m, shouldShowValidationUI as f, classNames as u, WatermarkOverlay as g } from "@progress/kendo-react-common";
import { packageMetadata as d } from "../package-metadata.mjs";
const h = class h extends r.Component {
  constructor(o) {
    super(o), this._element = null, this.showLicenseWatermark = !1, this.keyBinding = {
      [n.left]: () => this.prevNavigatableTab(),
      [n.right]: () => this.nextNavigatableTab(),
      [n.down]: () => this.nextNavigatableTab(),
      [n.up]: () => this.prevNavigatableTab(),
      [n.home]: () => 0,
      [n.end]: () => r.Children.count(this.props.children) - 1
    }, this.onSelect = (t) => {
      this.props.selected !== t && this.props.onSelect && this.props.onSelect({
        selected: t
      });
    }, this.onKeyDown = (t) => {
      let e;
      switch (t.keyCode) {
        case n.left:
          e = this.keyBinding[this.invertKeys(n.left, n.right)];
          break;
        case n.right:
          e = this.keyBinding[this.invertKeys(n.right, n.left)];
          break;
        case n.up:
          e = this.keyBinding[n.up];
          break;
        case n.down:
          e = this.keyBinding[n.down];
          break;
        case n.home:
          e = this.keyBinding[n.home];
          break;
        case n.end:
          e = this.keyBinding[n.end];
          break;
      }
      e && (t.preventDefault(), this.onSelect(e()));
    }, this.renderContent = (t) => {
      const { selected: e, children: i, tabContentStyle: s } = t, l = r.Children.count(i);
      return e < l && e > -1 ? /* @__PURE__ */ r.createElement(b, { index: e, ...t, style: s }) : null;
    }, this.firstNavigatableTab = () => {
      const t = this.children(), e = r.Children.count(t);
      if (t) {
        for (let i = 0; i < e; i++)
          if (!t[i].props.disabled)
            return i;
      }
    }, this.lastNavigatableTab = () => {
      const t = this.children(), e = r.Children.count(t);
      if (t) {
        for (let i = e - 1; i > 0; i--)
          if (!t[i].props.disabled)
            return i;
      }
    }, this.prevNavigatableTab = () => {
      const t = this.children(), { selected: e } = this.props, i = e ? e - 1 : -1;
      if (i < 0)
        return this.lastNavigatableTab();
      if (t)
        for (let s = i; s > -1; s--) {
          if (!t[s].props.disabled)
            return s;
          if (s === 0)
            return this.lastNavigatableTab();
        }
    }, this.nextNavigatableTab = () => {
      const t = this.children(), { selected: e } = this.props, i = e ? e + 1 : 1, s = r.Children.count(t);
      if (i >= s)
        return this.firstNavigatableTab();
      if (t)
        for (let l = i; l < s; l++) {
          if (!t[l].props.disabled)
            return l;
          if (l + 1 === s)
            return this.firstNavigatableTab();
        }
    }, m(d), this.showLicenseWatermark = f(d);
  }
  get contentPanelId() {
    return this.props.id + "-content-panel-id";
  }
  get navItemId() {
    return this.props.id + "-nav-item-id";
  }
  /**
   * @hidden
   */
  render() {
    const o = {
      ...this.props,
      children: this.children(),
      contentPanelId: this.contentPanelId,
      renderAllContent: this.props.renderAllContent,
      navItemId: this.navItemId,
      onKeyDown: this.onKeyDown,
      onSelect: this.onSelect
    }, { tabPosition: t, tabIndex: e = 0 } = o, i = t === "bottom", s = u(
      "k-tabstrip k-pos-relative",
      {
        "k-tabstrip-left": t === "left",
        "k-tabstrip-right": t === "right",
        "k-tabstrip-bottom": t === "bottom",
        "k-tabstrip-top": t === "top",
        "k-tabstrip-scrollable": this.props.scrollable
      },
      this.props.className
    );
    return /* @__PURE__ */ r.createElement(
      "div",
      {
        id: this.props.id,
        ref: (l) => this._element = l,
        dir: this.props.dir,
        className: s,
        style: this.props.style
      },
      !i && /* @__PURE__ */ r.createElement(c, { ...o, tabIndex: e }),
      this.renderContent(o),
      i && /* @__PURE__ */ r.createElement(c, { ...o, tabIndex: e }),
      this.showLicenseWatermark && /* @__PURE__ */ r.createElement(g, null)
    );
  }
  invertKeys(o, t) {
    return this._element && getComputedStyle(this._element).direction === "rtl" || !1 ? t : o;
  }
  children() {
    return r.Children.toArray(this.props.children).filter((o) => o);
  }
};
h.propTypes = {
  animation: a.bool,
  children: a.node,
  onSelect: a.func,
  selected: a.number,
  style: a.object,
  tabContentStyle: a.object,
  tabPosition: a.string,
  tabIndex: a.number,
  className: a.string,
  dir: a.string
}, h.defaultProps = {
  animation: !0,
  tabPosition: "top",
  keepTabsMounted: !1,
  buttonScrollSpeed: 100,
  mouseScrollSpeed: 10,
  renderAllContent: !1
};
let p = h;
export {
  p as TabStrip
};
