/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
const u = "", c = "0", t = "_";
function s(n, r) {
  if (i(n))
    return r[Number(n)];
  {
    const e = r[Number(f(n))];
    return e.items ? s(g(n), e.items) : void 0;
  }
}
function f(n) {
  return o(n) ? n : n.split(t)[0];
}
function g(n) {
  if (o(n))
    return n;
  {
    const r = n.indexOf(t);
    return n.substring(r + 1);
  }
}
function b(n) {
  return l("0", n);
}
function x(n, r) {
  return r.indexOf(n) === 0 ? r.length === n.length || r.charAt(n.length) === t : !1;
}
function l(n, r) {
  return r ? r + t + n : n;
}
function O(n) {
  const r = n.lastIndexOf(t);
  return r < 0 ? u : n.substring(0, r);
}
function o(n) {
  return n === u || n.indexOf(t) < 0;
}
function i(n) {
  return n !== u && n.indexOf(t) < 0;
}
function E(n) {
  return S(n) === 1;
}
function p(n) {
  return a(n) === c;
}
function a(n) {
  const r = n.lastIndexOf(t);
  return r < 0 ? n : n.substring(r + 1);
}
function L(n, r, e) {
  return i(r) ? n ? Number(r) < e - 1 ? (Number(r) + 1).toString() : "0" : Number(r) > 0 ? (Number(r) - 1).toString() : (e - 1).toString() : r;
}
function S(n) {
  return n.split(t).length - 1;
}
export {
  u as EMPTY_ID,
  t as SEPARATOR,
  c as ZERO_LEVEL_ZERO_ITEM_ID,
  l as createId,
  O as getDirectParentId,
  L as getDirectSiblingIdForLevelZero,
  b as getFirstChildId,
  g as getIdWithoutRootParentId,
  s as getItemById,
  f as getRootParentId,
  a as getShortId,
  p as isFirstItemFromSiblings,
  o as isIdEmptyOrZeroLevel,
  E as isIdFirstLevel,
  i as isIdZeroLevel,
  x as shouldOpenItem
};
