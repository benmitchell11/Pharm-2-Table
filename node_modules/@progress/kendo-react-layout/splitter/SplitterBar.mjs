/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import { Keys as n, classNames as m, Draggable as v, IconWrap as g } from "@progress/kendo-react-common";
import { caretAltLeftIcon as c, caretAltRightIcon as h, caretAltDownIcon as b, caretAltUpIcon as d } from "@progress/kendo-svg-icons";
class k extends a.Component {
  constructor(o) {
    super(o), this.draggable = null, this.onDrag = (t, e, l) => {
      const { event: s } = t, { onDrag: i, index: r } = this.props, p = this.draggable && this.draggable.element;
      p && !this.isStatic && this.isDraggable && i(s, p, r, e, l);
    }, this.onFocus = () => {
      this.setState({
        focused: !0
      });
    }, this.onBlur = () => {
      this.setState({
        focused: !1
      });
    }, this.onToggle = (t) => {
      const { onToggle: e, index: l, prev: s, next: i } = this.props;
      (s.collapsible || i.collapsible) && e(s.collapsible ? l : l + 1, t);
    }, this.onPrevToggle = (t) => {
      const { onToggle: e, index: l, prev: s } = this.props;
      s.collapsible && e(l, t);
    }, this.onNextToggle = (t) => {
      const { onToggle: e, index: l, next: s } = this.props;
      s.collapsible && e(l + 1, t);
    }, this.onKeyDown = (t) => {
      const e = t && t.keyCode, l = this.isHorizontal, { index: s } = this.props, i = this.draggable && this.draggable.element, r = (p, f, u) => {
        t.preventDefault(), this.props.onKeyboardResize(p, f, u, t);
      };
      i && (e === n.enter ? (t.preventDefault(), this.onToggle(t)) : this.isDraggable && (l && e === n.left ? r(i, s, -10) : l && e === n.right ? r(i, s, 10) : !l && e === n.up ? r(i, s, -10) : !l && e === n.down && r(i, s, 10)));
    }, this.state = {
      focused: !1
    };
  }
  get isStatic() {
    const { prev: o, next: t } = this.props, e = o.resizable && t.resizable, l = o.collapsible || t.collapsible;
    return !e && !l;
  }
  get isDraggable() {
    const { prev: o, next: t } = this.props, e = o.resizable && t.resizable, l = o.collapsed || t.collapsed;
    return !!e && !l;
  }
  get isHorizontal() {
    return this.props.orientation === "horizontal";
  }
  render() {
    const o = this.isDraggable, t = this.isStatic, e = this.isHorizontal, l = m(
      "k-splitbar",
      {
        "k-focus": this.state.focused,
        "k-splitbar-horizontal": e,
        "k-splitbar-vertical": !e,
        "k-splitbar-draggable-horizontal": e && o,
        "k-splitbar-draggable-vertical": !e && o,
        "k-splitbar-static-horizontal": e && t,
        "k-splitbar-static-vertical": !e && t
      }
    );
    return /* @__PURE__ */ a.createElement(
      v,
      {
        onPress: (s) => this.onDrag(s, !0, !1),
        onDrag: (s) => this.onDrag(s, !1, !1),
        onRelease: (s) => this.onDrag(s, !1, !0),
        ref: (s) => {
          this.draggable = s;
        }
      },
      /* @__PURE__ */ a.createElement(
        "div",
        {
          tabIndex: t ? -1 : 0,
          role: "separator",
          "aria-valuenow": 0,
          "aria-label": this.props.ariaLabel,
          "aria-orientation": e ? "vertical" : void 0,
          className: l,
          style: { touchAction: "none" },
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onDoubleClick: this.onToggle,
          onKeyDown: this.onKeyDown
        },
        this.props.prev.collapsible && /* @__PURE__ */ a.createElement(
          "div",
          {
            className: "k-collapse-prev",
            onClick: this.onPrevToggle
          },
          /* @__PURE__ */ a.createElement(
            g,
            {
              name: this.props.prev.collapsible ? e ? this.props.prev.collapsed ? this.props.isRtl ? "caret-alt-left" : "caret-alt-right" : this.props.isRtl ? "caret-alt-right" : "caret-alt-left" : this.props.prev.collapsed ? "caret-alt-down" : "caret-alt-up" : void 0,
              icon: this.props.prev.collapsible ? e ? this.props.prev.collapsed ? this.props.isRtl ? c : h : this.props.isRtl ? h : c : this.props.prev.collapsed ? b : d : void 0,
              size: "xsmall"
            }
          )
        ),
        /* @__PURE__ */ a.createElement("div", { className: "k-resize-handle" }),
        this.props.next.collapsible && /* @__PURE__ */ a.createElement(
          "div",
          {
            className: "k-collapse-next",
            onClick: this.onNextToggle
          },
          /* @__PURE__ */ a.createElement(
            g,
            {
              name: this.props.next.collapsible ? e ? this.props.next.collapsed ? this.props.isRtl ? "caret-alt-right" : "caret-alt-left" : this.props.isRtl ? "caret-alt-left" : "caret-alt-right" : this.props.next.collapsed ? "caret-alt-up" : "caret-alt-down" : void 0,
              icon: this.props.next.collapsible ? e ? this.props.next.collapsed ? this.props.isRtl ? h : c : this.props.isRtl ? c : h : this.props.next.collapsed ? d : b : void 0,
              size: "xsmall"
            }
          )
        )
      )
    );
  }
}
export {
  k as SplitterBar
};
