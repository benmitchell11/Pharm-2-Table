/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as o from "react";
import t from "prop-types";
import { validatePackage as T, svgIconPropType as y, classNames as C, kendoThemeMaps as k, IconWrap as z } from "@progress/kendo-react-common";
import { packageMetadata as A } from "./package-metadata.mjs";
function $({ imageUrl: m, name: e, iconClass: s, svgIcon: i, imageAlt: n }) {
  return m ? /* @__PURE__ */ o.createElement("img", { role: "presentation", className: "k-button-icon", alt: n, src: m }) : e || i ? /* @__PURE__ */ o.createElement(z, { className: "k-button-icon", name: e, icon: i }) : s ? /* @__PURE__ */ o.createElement("span", { role: "presentation", className: C("k-button-icon", s) }) : null;
}
const l = class l extends o.Component {
  constructor(e) {
    super(e), this._element = null, this.handleClick = (s) => {
      this.toggleIfApplicable(), this.props.onClick && this.props.onClick.call(void 0, s);
    }, T(A), this.state = { selected: this.props.togglable === !0 && this.props.selected === !0 };
  }
  /**
   * Gets the DOM element of the Button component.
   */
  get element() {
    return this._element;
  }
  /**
   * Returns `true` when the component is togglable and selected ([see example]({% slug toggleable_button %})).
   * Otherwise, returns `false`.
   */
  get selected() {
    return this._selectedTemp !== void 0 ? this._selectedTemp : this.state.selected;
  }
  /**
   * @hidden
   */
  static getDerivedStateFromProps(e, s) {
    return e.togglable && e.selected !== void 0 && e.selected !== s.selected ? { selected: e.selected } : null;
  }
  /**
   * @hidden
   */
  render() {
    const {
      children: e,
      togglable: s,
      icon: i,
      iconClass: n,
      svgIcon: p,
      imageUrl: u,
      imageAlt: E,
      className: O,
      startIcon: h,
      endIcon: g,
      onClick: x,
      size: a = l.defaultProps.size,
      rounded: c = l.defaultProps.rounded,
      fillMode: r = l.defaultProps.fillMode,
      themeColor: f = l.defaultProps.themeColor,
      ...N
    } = this.props, P = p !== void 0 || i !== void 0 || n !== void 0 || u !== void 0, I = e !== void 0, M = $({
      name: i,
      svgIcon: p,
      iconClass: n,
      imageUrl: u,
      imageAlt: E
    }), b = (d) => o.cloneElement(d, { className: "k-button-icon" });
    return /* @__PURE__ */ o.createElement(
      "button",
      {
        ref: (d) => this._element = d,
        "aria-pressed": s ? this.state.selected : void 0,
        ...N,
        onClick: this.handleClick,
        className: C(
          "k-button",
          {
            [`k-button-${k.sizeMap[a] || a}`]: a,
            [`k-button-${r}`]: r,
            [`k-button-${r}-${f}`]: !!(r && f),
            [`k-rounded-${k.roundedMap[c] || c}`]: c,
            "k-icon-button": !I && P,
            "k-disabled": this.props.disabled,
            "k-selected": this.state.selected,
            "k-rtl": this.props.dir === "rtl"
          },
          this.props.className
        )
      },
      h && b(h),
      M,
      e && /* @__PURE__ */ o.createElement("span", { className: "k-button-text" }, e),
      g && b(g)
    );
  }
  toggleIfApplicable() {
    if (this.props.togglable && this.props.selected === void 0) {
      const e = !this.state.selected;
      this._selectedTemp = e, this.setState({ selected: e }, () => this._selectedTemp = void 0);
    }
  }
};
l.propTypes = {
  children: t.node,
  selected: t.bool,
  togglable: t.bool,
  icon: t.string,
  svgIcon: y,
  iconClass: t.string,
  imageUrl: t.string,
  imageAlt: t.string,
  size: t.oneOf([null, "small", "medium", "large"]),
  rounded: t.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: t.oneOf([null, "flat", "link", "outline", "solid"]),
  // eslint-disable-next-line max-len
  themeColor: t.oneOf([null, "base", "primary", "secondary", "tertiary", "info", "success", "warning", "error", "dark", "light", "inverse"])
}, l.defaultProps = {
  togglable: !1,
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  themeColor: "base"
};
let v = l;
export {
  v as Button
};
