/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import r from "prop-types";
import { validatePackage as u, classNames as c } from "@progress/kendo-react-common";
import { packageMetadata as b } from "./package-metadata.mjs";
import g from "./util.mjs";
const i = g.styles, a = class a extends e.Component {
  constructor(t) {
    super(t), this._element = null, u(b);
  }
  /**
   * @hidden
   */
  render() {
    const t = this.mapButtons(this.props.children), o = c(
      [i["button-group"]],
      {
        "k-disabled": this.props.disabled,
        [i["button-group-stretched"]]: !!this.props.width
      },
      this.props.className
    ), p = {
      className: o,
      style: { width: `${this.props.width}` },
      dir: this.props.dir,
      // Accessibility properties
      role: "group",
      "aria-disabled": this.props.disabled
    };
    return /* @__PURE__ */ e.createElement(
      "div",
      {
        ref: (s) => {
          this._element = s;
        },
        ...p,
        className: o
      },
      t
    );
  }
  mapButtons(t) {
    const o = e.Children.count(t), p = this.props.dir !== void 0 ? this.props.dir === "rtl" : this._element && getComputedStyle(this._element).direction === "rtl" || !1;
    return e.Children.map(t, (s, n) => e.isValidElement(s) ? this.renderButton(s, n, n === o - 1, p) : s);
  }
  renderButton(t, o, p, s) {
    const n = c(t.props.className, {
      [i["group-start"]]: s ? p : o === 0,
      [i["group-end"]]: s ? o === 0 : p
    }), l = { ...this.props.width ? { width: this.props.width } : {}, ...t.props.style || {} }, d = this.props.disabled || t.props.disabled, m = {
      ...t.props,
      ...n ? { className: n } : {},
      ...Object.keys(l).length ? { style: l } : {},
      ...d !== void 0 ? { disabled: d } : {}
    };
    return e.Children.count(t.props.children) > 0 ? e.cloneElement(t, m, t.props.children) : e.cloneElement(t, m);
  }
};
a.propTypes = {
  children: r.oneOfType([r.arrayOf(r.element), r.element]),
  className: r.string,
  disabled: r.bool,
  width: r.string,
  dir: r.string
};
let h = a;
export {
  h as ButtonGroup
};
