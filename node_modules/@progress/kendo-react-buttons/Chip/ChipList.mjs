/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import e from "prop-types";
import { validatePackage as Q, useDir as U, getter as I, useMouse as W, getTabIndex as X, classNames as Y, kendoThemeMaps as Z } from "@progress/kendo-react-common";
import { selectionReducer as _ } from "./selection-reducer.mjs";
import { focusReducer as V } from "./focus-reducer.mjs";
import { dataReducer as ee } from "./data-reducer.mjs";
import { Chip as D } from "./Chip.mjs";
import { ChipListSelectionContext as te, ChipListFocusContext as ae, ChipListDataContext as ne } from "./chip-list-contexts.mjs";
import { packageMetadata as se } from "../package-metadata.mjs";
const ie = (t, i, s) => {
  i.selection === "multiple" ? Array.isArray(t) || (t = t ? [t] : null) : i.selection === "single" && Array.isArray(t) && (t = t ? t.join("") : null);
  const [l, o] = a.useState(t);
  return [l, (r) => {
    const c = _(i.state || l, { ...r, ...i });
    s && s(c, r.event), i.selection !== "none" && o(c);
  }];
}, le = (t) => {
  const [i, s] = a.useState(null);
  return [i, (o) => {
    const d = V(o.payload, { ...o, ...t });
    s(d);
  }];
}, oe = (t, i, s) => {
  const [l, o] = a.useState(t);
  return [l, (r) => {
    const c = ee(i.state || l, { ...r, ...i });
    s && s(c, r.event), o(c);
  }];
}, g = a.forwardRef((t, i) => {
  Q(se);
  const s = a.useRef(null), l = a.useRef(null), o = U(l, t.dir), {
    chip: d,
    id: r,
    style: c,
    tabIndex: M,
    disabled: y,
    size: h,
    className: O,
    ariaDescribedBy: P,
    ariaLabelledBy: E,
    ariaLabel: T,
    selection: x = m.selection,
    value: f = m.defaultValue,
    defaultData: z = m.defaultData,
    valueField: p = m.valueField,
    textField: S = m.textField,
    onChange: b,
    onDataChange: C
  } = t, N = a.useMemo(
    () => d || D,
    [d, D]
  );
  a.useImperativeHandle(s, () => ({
    element: l.current,
    props: t
  })), a.useImperativeHandle(i, () => s.current);
  const w = a.useCallback(
    (n, u) => {
      b && s.current && b.call(void 0, {
        value: n,
        target: s.current,
        syntheticEvent: u
      });
    },
    [b]
  ), [F, A] = ie(
    f || t.defaultValue,
    {
      selection: x,
      state: f
    },
    w
  ), B = a.useCallback(
    (n, u) => {
      C && s.current && C.call(void 0, {
        value: n,
        target: s.current,
        syntheticEvent: u
      });
    },
    [C]
  ), [k, j] = oe(
    t.data || z,
    {
      state: t.data,
      valueField: p
    },
    B
  ), L = a.useCallback(
    (n, u) => (n.push(u[p]), n),
    [p]
  ), v = a.useMemo(
    () => t.data || k,
    [t.data, k]
  ), G = a.useMemo(
    () => f || F,
    [f, F]
  ), H = a.useMemo(
    () => v.reduce(L, []),
    [v, L]
  ), R = a.useCallback(
    (n) => I(p)(n),
    [p]
  ), K = a.useCallback(
    (n) => I(S)(n),
    [S]
  ), [$, q] = le({ items: H }), J = W(t, s);
  return /* @__PURE__ */ a.createElement(te.Provider, { value: [G, A] }, /* @__PURE__ */ a.createElement(ae.Provider, { value: [$, q] }, /* @__PURE__ */ a.createElement(ne.Provider, { value: [v, j] }, /* @__PURE__ */ a.createElement(
    "div",
    {
      ref: l,
      ...J,
      role: y ? void 0 : "listbox",
      id: r,
      dir: o,
      style: c,
      tabIndex: X(M, y, void 0),
      className: Y(
        "k-chip-list",
        {
          "k-rtl": o === "rtl",
          "k-disabled": y,
          [`k-chip-list-${Z.sizeMap[h] || h}`]: h
        },
        O
      ),
      "aria-label": T,
      "aria-labelledby": E,
      "aria-describedby": P,
      "aria-orientation": "horizontal",
      "aria-multiselectable": x === "multiple"
    },
    v.map((n, u) => /* @__PURE__ */ a.createElement(
      N,
      {
        role: "option",
        dataItem: n,
        size: h,
        key: [R(n), u].join("-"),
        text: K(n),
        value: R(n),
        ariaLabel: n.ariaLabel,
        svgIcon: n.svgIcon || void 0
      }
    ))
  ))));
}), re = {
  id: e.string,
  className: e.string,
  tabIndex: e.number,
  data: e.any,
  defaultData: e.arrayOf(e.any),
  onDataChange: e.func,
  value: e.oneOfType([e.any, e.arrayOf(e.any)]),
  defaultValue: e.oneOfType([e.any, e.arrayOf(e.any)]),
  onChange: e.func,
  selection: e.oneOf(["single", "none", "multiple"]),
  textField: e.string,
  valueField: e.string,
  disabled: e.bool,
  dir: e.oneOf(["ltr", "rtl"]),
  ariaLabelledBy: e.string,
  ariaDescribedBy: e.string,
  size: e.oneOf([null, "small", "medium", "large"])
}, m = {
  chip: D,
  size: "medium",
  disabled: !1,
  defaultValue: null,
  defaultData: [],
  dir: "ltr",
  selection: "none",
  textField: "text",
  valueField: "value",
  removable: "removable"
};
g.displayName = "KendoReactChipList";
g.propTypes = re;
g.defaultProps = m;
export {
  g as ChipList
};
