/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import t from "prop-types";
import { ChipListSelectionContext as z, ChipListFocusContext as S, ChipListDataContext as w } from "./chip-list-contexts.mjs";
import { validatePackage as A, useDir as B, Keys as m, useMouse as F, getTabIndex as K, classNames as E, kendoThemeMaps as x, IconWrap as f, toIconName as y, svgIconPropType as k } from "@progress/kendo-react-common";
import { xCircleIcon as P } from "@progress/kendo-svg-icons";
import { FOCUS_ACTION as u } from "./focus-reducer.mjs";
import { CHIP_DATA_ACTION as $ } from "./data-reducer.mjs";
import { SELECTION_ACTION as h } from "./selection-reducer.mjs";
import { packageMetadata as L } from "../package-metadata.mjs";
const b = a.forwardRef((e, N) => {
  A(L);
  const n = a.useRef(null), o = a.useRef(null), g = B(o, e.dir);
  a.useImperativeHandle(n, () => ({
    element: o.current,
    props: e
  })), a.useImperativeHandle(N, () => n.current);
  const [d, i] = a.useContext(z), [C, c] = a.useContext(S), [, I] = a.useContext(w), r = a.useMemo(
    () => e.selected || (Array.isArray(d) ? d.some((l) => l === e.value) : d === e.value),
    [e.selected, e.value, d]
  ), s = a.useMemo(
    () => C === e.value,
    [e.value, C]
  );
  a.useEffect(
    () => {
      s && o.current && o.current.focus();
    },
    [s]
  );
  const M = a.useCallback(
    (l) => {
      i({ type: h.toggle, payload: e.value, event: l });
    },
    [i, e.value]
  ), v = a.useCallback(
    (l) => {
      e.removable && (I({ type: $.remove, payload: e.value, event: l }), c({ type: u.reset, payload: e.value, event: l }), i({ type: h.remove, payload: e.value, event: l }), e.onRemove && e.onRemove.call(
        void 0,
        {
          target: n.current,
          syntheticEvent: l
        }
      ));
    },
    [e.onRemove, e.value, e.removable, I, c, i]
  ), D = a.useCallback(
    (l) => {
      switch (l.keyCode) {
        case m.left:
          c({ type: u.prev, payload: e.value, event: l });
          break;
        case m.right:
          c({ type: u.next, payload: e.value, event: l });
          break;
        case m.enter:
          i({ type: h.toggle, payload: e.value, event: l });
          break;
        case m.delete:
          v(l);
          break;
      }
      e.onKeyDown && e.onKeyDown.call(
        void 0,
        {
          target: n.current,
          syntheticEvent: l
        }
      );
    },
    [e.onKeyDown, e.value, c, i, v]
  ), R = a.useCallback(
    (l) => {
      c({ payload: e.value, type: u.current, event: l }), e.onFocus && e.onFocus.call(
        void 0,
        {
          target: n.current,
          syntheticEvent: l
        }
      );
    },
    [e.onFocus, e.value, c]
  ), T = a.useCallback(
    (l) => {
      e.onBlur && e.onBlur.call(
        void 0,
        {
          target: n.current,
          syntheticEvent: l
        }
      );
    },
    [e.onBlur]
  ), O = F(e, n, { onClick: M });
  return /* @__PURE__ */ a.createElement(
    "div",
    {
      ...O,
      role: e.role || "button",
      id: e.value,
      style: e.style,
      ref: o,
      dir: g,
      tabIndex: K(e.tabIndex, e.disabled, void 0),
      className: E(
        "k-chip",
        {
          "k-rtl": g === "rtl",
          "k-disabled": e.disabled,
          "k-selected": r,
          "k-focus": s,
          [`k-chip-${x.sizeMap[e.size] || e.size}`]: e.size,
          [`k-rounded-${x.roundedMap[e.rounded] || e.rounded}`]: e.rounded,
          [`k-chip-${e.fillMode}`]: e.fillMode,
          [`k-chip-${e.fillMode}-${e.themeColor}`]: !!(e.fillMode && e.themeColor)
        },
        e.className
      ),
      "aria-pressed": e.role ? void 0 : r,
      "aria-disabled": e.disabled,
      "aria-describedby": e.ariaDescribedBy,
      "aria-keyshortcuts": e.removable ? "Enter Delete" : void 0,
      onFocus: R,
      onBlur: T,
      onKeyDown: D
    },
    r && (e.selectedIcon || e.selectedSvgIcon) && /* @__PURE__ */ a.createElement(
      f,
      {
        className: "k-chip-icon",
        name: e.selectedIcon ? y(e.selectedIcon) : void 0,
        icon: e.selectedSvgIcon,
        size: "small"
      }
    ),
    (e.icon || e.svgIcon) && /* @__PURE__ */ a.createElement(
      f,
      {
        className: "k-chip-icon",
        name: e.icon ? y(e.icon) : void 0,
        icon: e.svgIcon,
        size: "small"
      }
    ),
    e.avatar && /* @__PURE__ */ a.createElement(
      "div",
      {
        className: `k-chip-avatar k-avatar k-rounded-${e.avatar.rounded} k-avatar-md k-avatar-solid k-avatar-solid-primary`,
        style: e.avatar.style
      },
      /* @__PURE__ */ a.createElement("span", { className: "k-avatar-image" }, /* @__PURE__ */ a.createElement(
        "img",
        {
          src: e.avatar.image,
          alt: e.avatar.imageAlt
        }
      ))
    ),
    /* @__PURE__ */ a.createElement("span", { className: "k-chip-content" }, e.children !== void 0 ? e.children : e.text && /* @__PURE__ */ a.createElement(
      "span",
      {
        "aria-label": e.ariaLabel || e.text,
        className: "k-chip-label"
      },
      e.text
    )),
    e.removable && /* @__PURE__ */ a.createElement("span", { className: "k-chip-actions" }, /* @__PURE__ */ a.createElement("span", { className: E("k-chip-action", "k-chip-remove-action"), onClick: v }, /* @__PURE__ */ a.createElement(
      f,
      {
        name: e.removeIcon ? y(e.removeIcon) : void 0,
        icon: e.removeSvgIcon || P,
        size: "small"
      }
    )))
  );
}), _ = {
  id: t.string,
  text: t.string,
  value: t.any,
  dir: t.oneOf(["ltr", "rtl"]),
  removable: t.bool,
  removeIcon: t.string,
  removeIconSvg: k,
  disabled: t.bool,
  icon: t.string,
  svgIcon: k,
  selectedIcon: t.string,
  selectedIconSvg: k,
  onRemove: t.func,
  dataItem: t.any,
  selected: t.bool,
  ariaDescribedBy: t.string,
  size: t.oneOf([null, "small", "medium", "large"]),
  rounded: t.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: t.oneOf([null, "outline", "solid"]),
  // eslint-disable-next-line max-len
  themeColor: t.oneOf([null, "base", "info", "success", "warning", "error"])
}, H = {
  disabled: !1,
  removable: !1,
  removeIcon: "k-i-x-circle",
  dir: "ltr",
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  themeColor: "base"
};
b.displayName = "KendoReactChip";
b.propTypes = _;
b.defaultProps = H;
export {
  b as Chip
};
