/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import e from "prop-types";
import { Popup as _ } from "@progress/kendo-react-popup";
import { cloneDate as I } from "@progress/kendo-date-math";
import { Keys as h, validatePackage as K, canUseDOM as y, AsyncFocusBlur as U, classNames as j, kendoThemeMaps as D, createPropsContext as $, withIdHOC as W, withPropsContext as X } from "@progress/kendo-react-common";
import { calendarIcon as H } from "@progress/kendo-svg-icons";
import { DateInput as Z } from "../dateinput/DateInput.mjs";
import { Button as G } from "@progress/kendo-react-buttons";
import { packageMetadata as J } from "../package-metadata.mjs";
import { MAX_DATE as Q, MIN_DATE as Y, isInDateRange as ee, MAX_TIME as te, MIN_TIME as ie } from "../utils.mjs";
import { MOBILE_MEDIUM_DEVISE as se } from "../common/constants.mjs";
import { dateTimePickerCancel as S, messages as u, dateTimePickerSet as T, toggleDateTimeSelector as p } from "../messages/index.mjs";
import { provideLocalizationService as m, registerForLocalization as oe } from "@progress/kendo-react-intl";
import { DateTimeSelector as ne } from "./DateTimeSelector.mjs";
import { isInTimeRange as ae } from "../timepicker/utils.mjs";
import { PickerFloatingLabel as re } from "../hooks/usePickerFloatingLabel.mjs";
import { AdaptiveMode as le } from "../common/AdaptiveMode.mjs";
import { ActionSheetContent as de } from "@progress/kendo-react-layout";
const o = class o extends a.Component {
  constructor(t) {
    super(t), this._element = null, this._dateInput = a.createRef(), this._dateTimeSelector = null, this.shouldFocusDateInput = !1, this.prevShow = !1, this.focus = () => {
      const i = this.dateInputElement();
      i && i.focus();
    }, this.renderPicker = () => {
      const {
        disabled: i,
        minTime: s,
        maxTime: n,
        format: d,
        calendar: l,
        cancelButton: r,
        weekNumber: f,
        focusedDate: g
      } = this.props;
      return /* @__PURE__ */ a.createElement(
        ne,
        {
          ref: (v) => {
            this._dateTimeSelector = v;
          },
          cancelButton: r,
          steps: this.props.steps,
          value: this.value,
          onChange: this.handleValueChange,
          onReject: this.handleReject,
          disabled: i,
          weekNumber: f,
          min: this.min,
          max: this.max,
          minTime: s,
          maxTime: n,
          focusedDate: g,
          format: d,
          calendar: l,
          mobileMode: this.mobileMode,
          footerActions: !this.mobileMode
        }
      );
    }, this.renderAdaptivePopup = () => {
      const { windowWidth: i = 0 } = this.state, s = m(this).toLanguageString(S, u[S]), n = m(this).toLanguageString(T, u[T]), d = {
        expand: this.show,
        onClose: this.handleBlur,
        adaptiveTitle: this.props.adaptiveTitle,
        windowWidth: i,
        footer: {
          cancelText: s,
          onCancel: (l) => {
            var r;
            return (r = this._dateTimeSelector) == null ? void 0 : r.handleReject(l);
          },
          applyText: n,
          onApply: (l) => {
            var r;
            return (r = this._dateTimeSelector) == null ? void 0 : r.handleAccept(l);
          }
        }
      };
      return /* @__PURE__ */ a.createElement(le, { ...d }, /* @__PURE__ */ a.createElement(de, { className: "!k-overflow-hidden" }, this.renderPicker()));
    }, this.handleReject = () => {
      this.shouldFocusDateInput = !0, this.setShow(!1);
    }, this.handleValueChange = (i) => {
      this.setState({
        value: I(i.value || void 0)
      }), this.valueDuringOnChange = i.value, this.showDuringOnChange = !1, this.mobileMode || (this.shouldFocusDateInput = !0);
      const { onChange: s } = this.props;
      s && s.call(void 0, {
        syntheticEvent: i.syntheticEvent,
        nativeEvent: i.nativeEvent,
        value: this.value,
        show: this.show,
        target: this
      }), this.valueDuringOnChange = void 0, this.showDuringOnChange = void 0, this.setShow(!1);
    }, this.handleFocus = () => {
      this.setState({ focused: !0 });
    }, this.handleBlur = () => {
      this.setState({ focused: !1 }), this.setShow(!1);
    }, this.handleDateIconClick = () => {
      this.props.disabled || (this.shouldFocusDateInput = !0, this.setShow(!this.show));
    }, this.handleIconMouseDown = (i) => {
      i.preventDefault();
    }, this.handleKeyDown = (i) => {
      const { altKey: s, keyCode: n } = i;
      if (n === h.esc) {
        this.shouldFocusDateInput = !0, this.setShow(!1);
        return;
      }
      s && (n === h.up || n === h.down) && (i.preventDefault(), i.stopPropagation(), this.shouldFocusDateInput = n === h.up, this.setShow(n === h.down));
    }, this.dateInputElement = () => this.dateInput && this.dateInput.element || this.element && this.element.querySelector(".k-dateinput > input.k-input-inner"), K(J), this.state = {
      value: this.props.defaultValue || o.defaultProps.defaultValue,
      show: this.props.defaultShow || o.defaultProps.defaultShow,
      focused: !1
    };
  }
  get _popupId() {
    return this.props.id + "-popup-id";
  }
  get document() {
    if (y)
      return this.element && this.element.ownerDocument || document;
  }
  /**
   * Gets the wrapping element of the DateTimePicker.
   */
  get element() {
    return this._element;
  }
  /**
   * Gets the DateInput component inside the DateTimePicker component.
   */
  get dateInput() {
    return this._dateInput.current;
  }
  /**
   * Gets the value of the DateTimePicker.
   */
  get value() {
    const t = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
    return t !== null ? I(t) : null;
  }
  /**
   * Gets the popup state of the DateTimePicker.
   */
  get show() {
    return this.showDuringOnChange !== void 0 ? this.showDuringOnChange : this.props.show !== void 0 ? this.props.show : this.state.show;
  }
  /**
   * Gets the `name` property of the DateTimePicker.
   */
  get name() {
    return this.props.name;
  }
  /**
   * The mobile mode of the ComboBox.
   */
  get mobileMode() {
    return !!(this.state.windowWidth && this.state.windowWidth <= se && this.props.adaptive);
  }
  get min() {
    return this.props.min !== void 0 ? this.props.min : o.defaultProps.min;
  }
  get max() {
    return this.props.max !== void 0 ? this.props.max : o.defaultProps.max;
  }
  /**
   * Represents the validity state into which the DateTimePicker is set.
   */
  get validity() {
    const t = ee(this.value, this.min, this.max) && ae(this.value, this.props.minTime || ie, this.props.maxTime || te), i = this.props.validationMessage !== void 0, s = (!this.required || this.value !== null) && t, n = this.props.valid !== void 0 ? this.props.valid : s;
    return {
      customError: i,
      rangeOverflow: this.value && this.max.getTime() < this.value.getTime() || !1,
      rangeUnderflow: this.value && this.value.getTime() < this.min.getTime() || !1,
      valid: n,
      valueMissing: this.value === null
    };
  }
  /**
   * @hidden
   */
  get validityStyles() {
    return this.props.validityStyles !== void 0 ? this.props.validityStyles : o.defaultProps.validityStyles;
  }
  /**
   * @hidden
   */
  get required() {
    return this.props.required !== void 0 ? this.props.required : o.defaultProps.required;
  }
  /**
   * @hidden
   */
  get dateInputComp() {
    return this.props.dateInput || o.defaultProps.dateInput;
  }
  /**
   * @hidden
   */
  componentDidMount() {
    var t;
    this.observerResize = y && window.ResizeObserver && new window.ResizeObserver(this.calculateMedia.bind(this)), this.show && this.forceUpdate(), (t = this.document) != null && t.body && this.observerResize && this.observerResize.observe(this.document.body);
  }
  /**
   * @hidden
   */
  componentDidUpdate() {
    const t = this.dateInputElement();
    this._dateTimeSelector && this.show && !this.prevShow && this._dateTimeSelector.focus({ preventScroll: !0 }), t && !this.show && this.shouldFocusDateInput && t.focus({ preventScroll: !0 }), this.prevShow = this.show, this.shouldFocusDateInput = !1;
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    var t;
    clearTimeout(this.nextTickId), (t = this.document) != null && t.body && this.observerResize && this.observerResize.disconnect();
  }
  /**
   * @hidden
   */
  render() {
    const {
      size: t = o.defaultProps.size,
      rounded: i = o.defaultProps.rounded,
      fillMode: s = o.defaultProps.fillMode,
      disabled: n,
      tabIndex: d,
      title: l,
      id: r,
      format: f,
      formatPlaceholder: g,
      min: v,
      max: M,
      className: k,
      width: O,
      name: P,
      validationMessage: C,
      required: x,
      validityStyles: E,
      minTime: F,
      maxTime: R,
      ariaLabelledBy: z,
      ariaDescribedBy: A,
      popup: B = _
    } = this.props, w = !this.validityStyles || this.validity.valid, N = {
      id: r,
      ariaLabelledBy: z,
      ariaDescribedBy: A,
      format: f,
      formatPlaceholder: g,
      disabled: n,
      title: l,
      validityStyles: E,
      validationMessage: C,
      required: x,
      min: v,
      max: M,
      minTime: F,
      maxTime: R,
      name: P,
      tabIndex: this.show ? -1 : d,
      valid: this.validity.valid,
      value: this.value,
      onChange: this.handleValueChange,
      steps: this.props.steps,
      label: void 0,
      placeholder: this.state.focused ? null : this.props.placeholder,
      ariaExpanded: this.show,
      size: null,
      fillMode: null,
      rounded: null
    }, b = /* @__PURE__ */ a.createElement(
      U,
      {
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onSyncFocus: this.props.onFocus,
        onSyncBlur: this.props.onBlur
      },
      ({ onFocus: q, onBlur: V }) => /* @__PURE__ */ a.createElement(a.Fragment, null, /* @__PURE__ */ a.createElement(
        "div",
        {
          ref: (L) => {
            this._element = L;
          },
          className: j(
            "k-input",
            "k-datetimepicker",
            {
              [`k-input-${D.sizeMap[t] || t}`]: t,
              [`k-rounded-${D.roundedMap[i] || i}`]: i,
              [`k-input-${s}`]: s,
              "k-invalid": !w,
              "k-required": this.required,
              "k-disabled": this.props.disabled
            },
            k
          ),
          onKeyDown: this.handleKeyDown,
          style: { width: O },
          onFocus: this.mobileMode ? void 0 : q,
          onBlur: V,
          onClick: this.mobileMode ? this.handleDateIconClick : void 0
        },
        /* @__PURE__ */ a.createElement(
          this.dateInputComp,
          {
            _ref: this._dateInput,
            ariaRole: "combobox",
            ariaControls: this._popupId,
            readonly: this.mobileMode,
            ...N
          }
        ),
        /* @__PURE__ */ a.createElement(
          G,
          {
            tabIndex: -1,
            type: "button",
            icon: "calendar",
            svgIcon: H,
            onMouseDown: this.handleIconMouseDown,
            onClick: this.mobileMode ? void 0 : this.handleDateIconClick,
            title: m(this).toLanguageString(p, u[p]),
            className: "k-input-button",
            rounded: null,
            "aria-label": m(this).toLanguageString(p, u[p])
          }
        ),
        /* @__PURE__ */ a.createElement(
          B,
          {
            show: this.show,
            animate: this.element !== null,
            anchor: this.element,
            popupClass: "k-datetime-container k-reset",
            id: this._popupId,
            anchorAlign: {
              horizontal: "left",
              vertical: "bottom"
            },
            popupAlign: {
              horizontal: "left",
              vertical: "top"
            }
          },
          !this.mobileMode && this.renderPicker()
        )
      ), this.mobileMode && this.renderAdaptivePopup())
    );
    return this.props.label ? /* @__PURE__ */ a.createElement(
      re,
      {
        dateInput: this._dateInput,
        label: this.props.label,
        editorId: r,
        editorValid: w,
        editorDisabled: this.props.disabled,
        children: b,
        style: { width: this.props.width }
      }
    ) : b;
  }
  setShow(t) {
    const { onOpen: i, onClose: s } = this.props;
    this.show !== t && (this.setState({ show: t }), t && i && i.call(void 0, {
      target: this
    }), !t && s && s.call(void 0, {
      target: this
    }));
  }
  nextTick(t) {
    clearTimeout(this.nextTickId), this.nextTickId = window.setTimeout(() => t());
  }
  calculateMedia(t) {
    for (const i of t)
      this.setState({ windowWidth: i.target.clientWidth });
  }
};
o.displayName = "DateTimePicker", o.propTypes = {
  className: e.string,
  defaultShow: e.bool,
  defaultValue: e.instanceOf(Date),
  disabled: e.bool,
  focusedDate: e.instanceOf(Date),
  format: e.oneOfType([
    e.string,
    e.shape({
      skeleton: e.string,
      pattern: e.string,
      date: e.oneOf(["short", "medium", "long", "full"]),
      time: e.oneOf(["short", "medium", "long", "full"]),
      datetime: e.oneOf(["short", "medium", "long", "full"]),
      era: e.oneOf(["narrow", "short", "long"]),
      year: e.oneOf(["numeric", "2-digit"]),
      month: e.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
      day: e.oneOf(["numeric", "2-digit"]),
      weekday: e.oneOf(["narrow", "short", "long"]),
      hour: e.oneOf(["numeric", "2-digit"]),
      hour12: e.bool,
      minute: e.oneOf(["numeric", "2-digit"]),
      second: e.oneOf(["numeric", "2-digit"]),
      timeZoneName: e.oneOf(["short", "long"])
    })
  ]),
  formatPlaceholder: e.oneOfType([
    e.oneOf(["wide", "narrow", "short", "formatPattern"]),
    e.shape({
      year: e.string,
      month: e.string,
      day: e.string,
      hour: e.string,
      minute: e.string,
      second: e.string
    })
  ]),
  id: e.string,
  ariaLabelledBy: e.string,
  ariaDescribedBy: e.string,
  min: e.instanceOf(Date),
  max: e.instanceOf(Date),
  name: e.string,
  popupSettings: e.shape({
    animate: e.bool,
    appendTo: e.any,
    popupClass: e.string
  }),
  show: e.bool,
  tabIndex: e.number,
  title: e.string,
  value: e.instanceOf(Date),
  weekNumber: e.bool,
  width: e.oneOfType([e.number, e.string]),
  validationMessage: e.string,
  required: e.bool,
  validate: e.bool,
  valid: e.bool,
  cancelButton: e.bool,
  size: e.oneOf([null, "small", "medium", "large"]),
  rounded: e.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: e.oneOf([null, "solid", "flat", "outline"])
}, o.defaultProps = {
  defaultShow: !1,
  defaultValue: null,
  disabled: !1,
  format: "g",
  // general date and time pattern (short time): "M/d/y h:mm a" for en.
  max: Q,
  min: Y,
  popupSettings: {},
  tabIndex: 0,
  weekNumber: !1,
  required: !1,
  validityStyles: !0,
  cancelButton: !0,
  dateInput: Z,
  size: "medium",
  rounded: "medium",
  fillMode: "solid"
};
let c = o;
const he = $(), ue = W(X(he, c));
ue.displayName = "KendoReactDateTimePicker";
oe(c);
export {
  ue as DateTimePicker,
  he as DateTimePickerPropsContext,
  c as DateTimePickerWithoutContext
};
