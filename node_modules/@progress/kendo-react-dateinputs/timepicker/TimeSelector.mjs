/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import t from "prop-types";
import { cloneDate as c } from "@progress/kendo-date-math";
import { Keys as h, classNames as E, getActiveElement as T } from "@progress/kendo-react-common";
import { provideIntlService as _, provideLocalizationService as I, registerForIntl as S, registerForLocalization as x } from "@progress/kendo-react-intl";
import { timePickerCancel as v, messages as g, timePickerSet as w } from "../messages/index.mjs";
import { MIDNIGHT_DATE as A, MIN_TIME as K, MAX_TIME as M } from "../utils.mjs";
import { getNow as d, valueMerger as R, generateGetters as F } from "./utils.mjs";
import { TimePart as L } from "./TimePart.mjs";
import { Button as b } from "@progress/kendo-react-buttons";
const r = class r extends a.Component {
  constructor(i) {
    super(i), this._element = null, this._cancelButton = null, this._acceptButton = null, this.timePart = null, this.focusActiveList = () => {
      this.timePart && this.timePart.focus({ preventScroll: !0 });
    }, this.handleKeyDown = (e) => {
      const { keyCode: n } = e;
      switch (n) {
        case h.enter:
          this.hasActiveButton() || this.handleAccept(e);
          return;
        default:
          return;
      }
    }, this.revertToNowButton = (e) => {
      const { keyCode: n, shiftKey: o } = e;
      !o && n === h.tab && (e.preventDefault(), this.props.nowButton !== !1 ? this.timePart && this.timePart.focus({ preventScroll: !0 }, !0) : this.timePart && this.timePart.focus({ preventScroll: !0 }));
    }, this.handleNowKeyDown = (e) => {
      var l;
      const { keyCode: n, shiftKey: o } = e;
      o && n === h.tab ? (e.preventDefault(), this._acceptButton && ((l = this._acceptButton.element) == null || l.focus({ preventScroll: !0 }))) : n === h.enter && (e.stopPropagation(), this.handleNowClick(e));
    }, this.handleAccept = (e) => {
      const n = this.mergeValue(
        c(this.value || d()),
        this.timePart ? this.timePart.value : this.current
      );
      this.setState({ value: n }), this.valueDuringOnChange = n;
      const { onChange: o } = this.props;
      o && o.call(void 0, {
        syntheticEvent: e,
        nativeEvent: e.nativeEvent,
        value: this.value,
        target: this
      }), this.valueDuringOnChange = void 0;
    }, this.handleReject = (e) => {
      this.setState({ current: this.value });
      const { onReject: n } = this.props;
      n && n.call(void 0, e);
    }, this.handleNowClick = (e) => {
      const n = this.mergeValue(
        c(this.value || d()),
        d()
      );
      this.setState({
        current: n,
        value: n
      }), this.valueDuringOnChange = n;
      const { onChange: o } = this.props;
      o && o.call(void 0, {
        syntheticEvent: e,
        nativeEvent: e.nativeEvent,
        value: this.value,
        target: this
      }), this.valueDuringOnChange = void 0;
    }, this.handleChange = (e) => {
      this.setState({ current: e });
      const { handleTimeChange: n } = this.props;
      n && n.call(void 0, {
        time: e
      });
    }, this.dateFormatParts = this.intl.splitDateFormat(this.props.format || r.defaultProps.format), this.mergeValue = R(F(this.dateFormatParts)), this.hasActiveButton = this.hasActiveButton.bind(this), this.state = {
      current: this.props.value || A,
      value: this.props.value || r.defaultProps.value
    };
  }
  /**
   * @hidden
   */
  get element() {
    return this._element;
  }
  get value() {
    const i = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
    return i !== null ? c(i) : null;
  }
  get intl() {
    return _(this);
  }
  get current() {
    return this.state.current !== null ? c(this.state.current) : null;
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    clearTimeout(this.nextTickId);
  }
  /**
   * @hidden
   */
  render() {
    const {
      format: i,
      cancelButton: e,
      disabled: n,
      tabIndex: o,
      className: l,
      smoothScroll: B,
      min: k,
      max: y,
      boundRange: C,
      nowButton: D,
      steps: O,
      show: N,
      mobileMode: P
    } = this.props, f = I(this), m = f.toLanguageString(v, g[v]), p = f.toLanguageString(w, g[w]);
    return /* @__PURE__ */ a.createElement(
      "div",
      {
        ref: (s) => {
          this._element = s;
        },
        tabIndex: n ? void 0 : o || 0,
        className: E("k-timeselector", l, {
          "k-disabled": n
        }),
        onKeyDown: this.handleKeyDown
      },
      /* @__PURE__ */ a.createElement(
        L,
        {
          ref: (s) => {
            this.timePart = s;
          },
          value: this.current,
          onChange: this.handleChange,
          onNowClick: this.handleNowClick,
          format: i,
          smoothScroll: B,
          min: k,
          max: y,
          boundRange: C,
          disabled: n,
          nowButton: D,
          steps: O,
          show: N,
          mobileMode: P,
          onNowKeyDown: this.handleNowKeyDown
        }
      ),
      this.props.footer && /* @__PURE__ */ a.createElement("div", { className: "k-time-footer k-actions k-actions-stretched" }, e && /* @__PURE__ */ a.createElement(
        b,
        {
          type: "button",
          ref: (s) => {
            this._cancelButton = s;
          },
          className: "k-time-cancel",
          onClick: this.handleReject,
          title: m,
          "aria-label": m
        },
        m
      ), /* @__PURE__ */ a.createElement(
        b,
        {
          type: "button",
          ref: (s) => {
            this._acceptButton = s;
          },
          className: "k-time-accept",
          themeColor: "primary",
          onClick: this.handleAccept,
          onKeyDown: this.revertToNowButton,
          title: p,
          "aria-label": p
        },
        p
      ))
    );
  }
  nextTick(i) {
    clearTimeout(this.nextTickId), this.nextTickId = window.setTimeout(() => i());
  }
  hasActiveButton() {
    if (!this._acceptButton || !this._acceptButton.element)
      return !1;
    const i = T(document);
    return this._acceptButton && i === this._acceptButton.element || this._cancelButton && i === this._cancelButton.element;
  }
};
r.propTypes = {
  cancelButton: t.bool,
  className: t.string,
  disabled: t.bool,
  format: t.oneOfType([
    t.string,
    t.shape({
      skeleton: t.string,
      pattern: t.string,
      date: t.oneOf(["short", "medium", "long", "full"]),
      time: t.oneOf(["short", "medium", "long", "full"]),
      datetime: t.oneOf(["short", "medium", "long", "full"]),
      era: t.oneOf(["narrow", "short", "long"]),
      year: t.oneOf(["numeric", "2-digit"]),
      month: t.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
      day: t.oneOf(["numeric", "2-digit"]),
      weekday: t.oneOf(["narrow", "short", "long"]),
      hour: t.oneOf(["numeric", "2-digit"]),
      hour12: t.bool,
      minute: t.oneOf(["numeric", "2-digit"]),
      second: t.oneOf(["numeric", "2-digit"]),
      timeZoneName: t.oneOf(["short", "long"])
    })
  ]),
  max: t.instanceOf(Date),
  min: t.instanceOf(Date),
  nowButton: t.bool,
  steps: t.shape({
    hour: t.number,
    minute: t.number,
    second: t.number
  }),
  smoothScroll: t.bool,
  tabIndex: t.number,
  value: t.instanceOf(Date),
  show: t.bool
}, r.defaultProps = {
  value: null,
  disabled: !1,
  cancelButton: !0,
  format: "t",
  min: K,
  max: M,
  boundRange: !1,
  footer: !0
};
let u = r;
S(u);
x(u);
export {
  u as TimeSelector
};
