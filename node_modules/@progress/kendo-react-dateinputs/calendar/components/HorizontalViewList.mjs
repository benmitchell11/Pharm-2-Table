/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as r from "react";
import { View as p } from "./View.mjs";
import { CalendarViewEnum as s } from "../models/CalendarViewEnum.mjs";
import { classNames as h } from "@progress/kendo-react-common";
import { cloneDate as m } from "@progress/kendo-date-math";
import { MIN_DATE as u, MAX_DATE as v } from "../../utils.mjs";
const n = 2, i = class i extends r.Component {
  constructor(a) {
    super(a), this._element = null, this.isActive = !1, this.focusActiveDate = () => {
      if (!this._element)
        return;
      const e = this._element.querySelector("td.k-focus"), t = this._element.querySelector(".k-state-pending-focus");
      e && e[0] && e[0].classList.remove("k-focus"), t && t.classList.add("k-focus"), this.isActive = !0;
    }, this.blurActiveDate = () => {
      if (!this._element)
        return;
      const e = this._element.querySelector("td.k-focus");
      e && e.classList.remove("k-focus"), this.isActive = !1;
    }, this.rotateSelectionRange = (e) => {
      if (e.start === null || e.end === null)
        return e;
      const t = e.end < e.start;
      return {
        start: t ? e.end : e.start,
        end: t ? e.start : e.end
      };
    }, this.handleDateChange = (e, t = !1) => {
      const { onChange: o } = this.props;
      if (o) {
        const c = {
          syntheticEvent: e.syntheticEvent,
          nativeEvent: e.nativeEvent,
          value: m(e.value),
          target: this,
          isTodayClick: t
        };
        o.call(void 0, c);
      }
    };
  }
  get element() {
    return this._element;
  }
  get weekNumber() {
    return !!(this.props.showWeekNumbers && this.props.activeView === s.month);
  }
  get min() {
    return this.props.min !== void 0 ? this.props.min : i.defaultProps.min;
  }
  get max() {
    return this.props.max !== void 0 ? this.props.max : i.defaultProps.max;
  }
  componentDidUpdate() {
    this.isActive && this.focusActiveDate();
  }
  render() {
    const a = this.props.allowReverse ? this.rotateSelectionRange(this.props.selectionRange) : this.props.selectionRange, e = h(
      "k-calendar-view k-align-items-start k-justify-content-center",
      {
        "k-vstack": this.props.verticalView,
        "k-hstack": !this.props.verticalView,
        "k-calendar-monthview": this.props.activeView === s.month,
        "k-calendar-yearview": this.props.activeView === s.year,
        "k-calendar-decadeview": this.props.activeView === s.decade,
        "k-calendar-centuryview": this.props.activeView === s.century
      }
    );
    return /* @__PURE__ */ r.createElement(
      "div",
      {
        ref: (t) => {
          this._element = t;
        },
        className: e
      },
      this.props.dates.map((t) => /* @__PURE__ */ r.createElement("table", { className: "k-calendar-table k-content", key: t.getTime(), role: "grid" }, /* @__PURE__ */ r.createElement(
        p,
        {
          bus: this.props.bus,
          service: this.props.service,
          key: t.getTime(),
          direction: "horizontal",
          activeView: this.props.activeView,
          cellUID: this.props.cellUID,
          viewDate: t,
          min: this.min,
          max: this.max,
          focusedDate: this.props.focusedDate,
          selectionRange: a,
          selectedDate: this.props.value,
          showWeekNumbers: this.weekNumber,
          onChange: this.handleDateChange,
          onCellEnter: this.props.onCellEnter,
          cell: this.props.cell,
          weekCell: this.props.weekCell
        }
      )))
    );
  }
};
i.defaultProps = {
  showWeekNumbers: !1,
  views: n,
  take: n,
  allowReverse: !0,
  min: u,
  max: v
};
let l = i;
export {
  l as HorizontalViewList
};
